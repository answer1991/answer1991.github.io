<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Discovery on answer1991</title>
    <link>https://answer1991.github.io/tags/discovery/</link>
    <description>Recent content in Discovery on answer1991</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <copyright>&amp;copy; 2017 answer1991</copyright>
    <lastBuildDate>Fri, 23 Jun 2017 19:21:00 +0000</lastBuildDate>
    <atom:link href="/tags/discovery/" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Docker清理命令</title>
      <link>https://answer1991.github.io/post/docker_clean/</link>
      <pubDate>Fri, 23 Jun 2017 19:21:00 +0000</pubDate>
      
      <guid>https://answer1991.github.io/post/docker_clean/</guid>
      <description>

&lt;p&gt;引用自： &lt;a href=&#34;https://www.calazan.com/docker-cleanup-commands/&#34; target=&#34;_blank&#34;&gt;https://www.calazan.com/docker-cleanup-commands/&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;kill-all-running-containers&#34;&gt;Kill all running containers&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker stop $(docker ps -q)
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;delete-all-stopped-containers-including-data-only-containers&#34;&gt;Delete all stopped containers (including data-only containers)&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker rm $(docker ps -a -q)
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;delete-all-untagged-dangling-none-images&#34;&gt;Delete all &amp;lsquo;untagged/dangling&amp;rsquo; (&lt;none&gt;) images&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker rmi $(docker images -q -f dangling=true)
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;delete-all-images&#34;&gt;Delete ALL images&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker rmi $(docker images -q)
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>分布式集群基础组件-Consul</title>
      <link>https://answer1991.github.io/post/consul/</link>
      <pubDate>Fri, 23 Jun 2017 19:21:00 +0000</pubDate>
      
      <guid>https://answer1991.github.io/post/consul/</guid>
      <description>

&lt;h3 id=&#34;server&#34;&gt;Server&lt;/h3&gt;

&lt;h5 id=&#34;bootstrap-node&#34;&gt;Bootstrap Node&lt;/h5&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ docker run --net=host -dit --name=consul-server-bootstrap \
    -e &#39;CONSUL_LOCAL_CONFIG={&amp;quot;skip_leave_on_interrupt&amp;quot;: true}&#39; \
    -v consul-config:/consul/config \
    -v consul-data:/consul/data \
    consul:0.8.4 \
    agent -server \
    -client=0.0.0.0 \
    -bind $(hostname -i) \
    -bootstrap \
    -ui \
    -domain=consul \
    -datacenter=primary
&lt;/code&gt;&lt;/pre&gt;

&lt;h5 id=&#34;other-node&#34;&gt;Other Node&lt;/h5&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ docker run --net=host -dit --name=consul-server \
    -e &#39;CONSUL_LOCAL_CONFIG={&amp;quot;skip_leave_on_interrupt&amp;quot;: true}&#39; \
    -v consul-config:/consul/config \
    -v consul-data:/consul/data \
    consul:0.8.4 \
    agent -server \
    -client=0.0.0.0 \
    -bind=$(hostname -i) \
    -retry-join=bootstrapNode \
    -ui \
    -domain=consul \
    -datacenter=primary
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;client&#34;&gt;Client&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ docker run --net=host -dit --name=consul-client \
    -e &#39;CONSUL_LOCAL_CONFIG={&amp;quot;skip_leave_on_interrupt&amp;quot;: true}&#39; \
    -v consul-config:/consul/config \
    -v consul-data:/consul/data \
    consul:0.8.4 \
    agent \
    -client=0.0.0.0 \
    -bind=$(hostname -i) \
    -retry-join=ServerNodes \
    -domain=consul
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;dnsmasq&#34;&gt;DNSMASQ&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ sudo docker run -dit --net=host --name=dnsmasq \
    --cap-add=NET_ADMIN \
    andyshinn/dnsmasq:2.75 \
    -S /consul/127.0.0.1#8600
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>分布式集群基础组件-Zookeeper</title>
      <link>https://answer1991.github.io/post/zk/</link>
      <pubDate>Tue, 13 Jun 2017 19:21:00 +0000</pubDate>
      
      <guid>https://answer1991.github.io/post/zk/</guid>
      <description>

&lt;h3 id=&#34;单节点测试服务&#34;&gt;单节点测试服务&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ docker run -dit \
    --name zk-single \
    --net host \
    --restart always \
    -v zk-data:/data \
    -v zk-log:/datalog \
    zookeeper:3.4.10
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;注意： 这里使用了&lt;code&gt;host&lt;/code&gt;网络模式，这种基础组件服务我也建议使用&lt;code&gt;host&lt;/code&gt;模式。
同时，服务会占用&lt;code&gt;2181&lt;/code&gt;, &lt;code&gt;2888&lt;/code&gt;以及 &lt;code&gt;3888&lt;/code&gt;端口。&lt;/p&gt;

&lt;h3 id=&#34;三节点生产集群&#34;&gt;三节点生产集群&lt;/h3&gt;

&lt;p&gt;这里介绍没有使用&lt;code&gt;docker-compose&lt;/code&gt;方式起服务。&lt;/p&gt;

&lt;p&gt;假设我们要将服务器在 &lt;code&gt;10.10.10.1&lt;/code&gt;, &lt;code&gt;10.10.10.2&lt;/code&gt;, &lt;code&gt;10.10.10.3&lt;/code&gt; 三台机器上。&lt;/p&gt;

&lt;h5 id=&#34;10-10-10-1节点&#34;&gt;10.10.10.1节点&lt;/h5&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ docker run -dit \
    --name zk-1 \
    --net host \ 
    --restart always \
    -v zk-data:/data \
    -v zk-log:/datalog \
    -e ZOO_MY_ID=1 \
    -e &amp;quot;ZOO_SERVERS=server.1=10.10.10.1:2888:3888 server.2=10.10.10.2:2888:3888 server.3=10.10.10.3:2888:3888&amp;quot; \
    zookeeper:3.4.10
&lt;/code&gt;&lt;/pre&gt;

&lt;h5 id=&#34;10-10-10-2节点&#34;&gt;10.10.10.2节点&lt;/h5&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ docker run -dit \
    --name zk-2 \
    --net host \
    --restart always \
    -v zk-data:/data \
    -v zk-log:/datalog \
    -e ZOO_MY_ID=2 \
    -e &amp;quot;ZOO_SERVERS=server.1=10.10.10.1:2888:3888 server.2=10.10.10.2:2888:3888 server.3=10.10.10.3:2888:3888&amp;quot; \
    zookeeper:3.4.10
&lt;/code&gt;&lt;/pre&gt;

&lt;h5 id=&#34;10-10-10-3节点&#34;&gt;10.10.10.3节点&lt;/h5&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ docker run -dit 
    --name zk-3 \
    --net host \
    --restart always \
    -v zk-data:/data \
    -v zk-log:/datalog \
    -e ZOO_MY_ID=3 \
    -e &amp;quot;ZOO_SERVERS=server.1=10.10.10.1:2888:3888 server.2=10.10.10.2:2888:3888 server.3=10.10.10.3:2888:3888&amp;quot; \
    zookeeper:3.4.10
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>分布式集群基础组件-etcd</title>
      <link>https://answer1991.github.io/post/etcd/</link>
      <pubDate>Tue, 13 Jun 2017 19:21:00 +0000</pubDate>
      
      <guid>https://answer1991.github.io/post/etcd/</guid>
      <description>

&lt;h3 id=&#34;单节点测试服务&#34;&gt;单节点测试服务&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ docker run -dit --name etcd-single --net host \
    --restart=always \
    -e ETCD_NAME=infra1 \
    -e ETCD_INITIAL_ADVERTISE_PEER_URLS=http://$(hostname -i):2380 \
    -e ETCD_LISTEN_PEER_URLS=http://$(hostname -i):2380 \
    -e ETCD_LISTEN_CLIENT_URLS=http://$(hostname -i):2379,http://127.0.0.1:2379 \
    -e ETCD_ADVERTISE_CLIENT_URLS=http://$(hostname -i):2379 \
    -e ETCD_INITIAL_CLUSTER_TOKEN=hello_world \
    -e ETCD_INITIAL_CLUSTER=infra1=http://$(hostname -i):2380 \
    -e ETCD_INITIAL_CLUSTER_STATE=new \
    -e ETCD_AUTO_COMPACTION_RETENTION=1 \
    -e ETCD_SNAPSHOT_COUNT=10000 \
    -e ETCD_MAX_SNAPSHOTS=5 \
    -e ETCD_MAX_WALS=5 \
    -e ETCD_HEARTBEAT_INTERVAL=1000 \
    -e ETCD_ELECTION_TIMEOUT=10000 \
    -v etcd-infra1:/infra1.etcd \
    quay.io/coreos/etcd:v3.2.0 \
    etcd --quota-backend-bytes=8589934592
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;注意： 这里使用了&lt;code&gt;host&lt;/code&gt;网络模式，这种基础组件服务我也建议使用&lt;code&gt;host&lt;/code&gt;模式。
同时，服务会占用&lt;code&gt;2379&lt;/code&gt;, &lt;code&gt;2380&lt;/code&gt;端口。&lt;/p&gt;

&lt;h3 id=&#34;三节点生产集群&#34;&gt;三节点生产集群&lt;/h3&gt;

&lt;p&gt;这里介绍没有使用&lt;code&gt;docker-compose&lt;/code&gt;方式起服务。&lt;/p&gt;

&lt;p&gt;假设我们要将服务器在 &lt;code&gt;10.10.10.1&lt;/code&gt;, &lt;code&gt;10.10.10.2&lt;/code&gt;, &lt;code&gt;10.10.10.3&lt;/code&gt; 三台机器上。&lt;/p&gt;

&lt;p&gt;那么&lt;code&gt;ETCD_INITIAL_CLUSTER&lt;/code&gt;的值为&lt;code&gt;infra1=http://10.10.10.1:2380,infra2=http://10.10.10.2:2380,infra3=http://10.10.10.3:2380&lt;/code&gt;&lt;/p&gt;

&lt;h5 id=&#34;10-10-10-1节点&#34;&gt;10.10.10.1节点&lt;/h5&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ docker run -dit --name etcd-infra1 --net host \
    --restart=always \
    -e ETCD_NAME=infra1 \
    -e ETCD_INITIAL_ADVERTISE_PEER_URLS=http://$(hostname -i):2380 \
    -e ETCD_LISTEN_PEER_URLS=http://$(hostname -i):2380 \
    -e ETCD_LISTEN_CLIENT_URLS=http://$(hostname -i):2379,http://127.0.0.1:2379 \
    -e ETCD_ADVERTISE_CLIENT_URLS=http://$(hostname -i):2379 \
    -e ETCD_INITIAL_CLUSTER_TOKEN=hello_world \
    -e ETCD_INITIAL_CLUSTER=infra1=http://10.10.10.1:2380,infra2=http://10.10.10.2:2380,infra3=http://10.10.10.3:2380 \
    -e ETCD_INITIAL_CLUSTER_STATE=new \
    -e ETCD_AUTO_COMPACTION_RETENTION=1 \
    -e ETCD_SNAPSHOT_COUNT=10000 \
    -e ETCD_MAX_SNAPSHOTS=5 \
    -e ETCD_MAX_WALS=5 \
    -e ETCD_HEARTBEAT_INTERVAL=1000 \
    -e ETCD_ELECTION_TIMEOUT=10000 \
    -v etcd-infra1:/infra1.etcd \
    quay.io/coreos/etcd:v3.2.0 \
    etcd --quota-backend-bytes=8589934592
&lt;/code&gt;&lt;/pre&gt;

&lt;h5 id=&#34;10-10-10-2节点&#34;&gt;10.10.10.2节点&lt;/h5&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ docker run -dit --name etcd-infra2 --net host \
    --restart=always \
    -e ETCD_NAME=infra2 \
    -e ETCD_INITIAL_ADVERTISE_PEER_URLS=http://$(hostname -i):2380 \
    -e ETCD_LISTEN_PEER_URLS=http://$(hostname -i):2380 \
    -e ETCD_LISTEN_CLIENT_URLS=http://$(hostname -i):2379,http://127.0.0.1:2379 \
    -e ETCD_ADVERTISE_CLIENT_URLS=http://$(hostname -i):2379 \
    -e ETCD_INITIAL_CLUSTER_TOKEN=hello_world \
    -e ETCD_INITIAL_CLUSTER=infra1=http://10.10.10.1:2380,infra2=http://10.10.10.2:2380,infra3=http://10.10.10.3:2380 \
    -e ETCD_INITIAL_CLUSTER_STATE=new \
    -e ETCD_AUTO_COMPACTION_RETENTION=1 \
    -e ETCD_SNAPSHOT_COUNT=10000 \
    -e ETCD_MAX_SNAPSHOTS=5 \
    -e ETCD_MAX_WALS=5 \
    -e ETCD_HEARTBEAT_INTERVAL=1000 \
    -e ETCD_ELECTION_TIMEOUT=10000 \
    -v etcd-infra2:/infra2.etcd \
    quay.io/coreos/etcd:v3.2.0 \
    etcd --quota-backend-bytes=8589934592
&lt;/code&gt;&lt;/pre&gt;

&lt;h5 id=&#34;10-10-10-3节点&#34;&gt;10.10.10.3节点&lt;/h5&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ docker run -dit --name etcd-infra3 --net host \
    --restart=always \
    -e ETCD_NAME=infra3 \
    -e ETCD_INITIAL_ADVERTISE_PEER_URLS=http://$(hostname -i):2380 \
    -e ETCD_LISTEN_PEER_URLS=http://$(hostname -i):2380 \
    -e ETCD_LISTEN_CLIENT_URLS=http://$(hostname -i):2379,http://127.0.0.1:2379 \
    -e ETCD_ADVERTISE_CLIENT_URLS=http://$(hostname -i):2379 \
    -e ETCD_INITIAL_CLUSTER_TOKEN=hello_world \
    -e ETCD_INITIAL_CLUSTER=infra1=http://10.10.10.1:2380,infra2=http://10.10.10.2:2380,infra3=http://10.10.10.3:2380 \
    -e ETCD_INITIAL_CLUSTER_STATE=new \
    -e ETCD_AUTO_COMPACTION_RETENTION=1 \
    -e ETCD_SNAPSHOT_COUNT=10000 \
    -e ETCD_MAX_SNAPSHOTS=5 \
    -e ETCD_MAX_WALS=5 \
    -e ETCD_HEARTBEAT_INTERVAL=1000 \
    -e ETCD_ELECTION_TIMEOUT=10000 \
    -v etcd-infra3:/infra3.etcd \
    quay.io/coreos/etcd:v3.2.0 \
    etcd --quota-backend-bytes=8589934592
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>
